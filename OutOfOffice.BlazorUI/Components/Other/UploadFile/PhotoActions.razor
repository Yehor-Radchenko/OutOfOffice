@using OutOfOffice.BlazorUI.Components.Other.Dialogs
@using OutOfOffice.BlazorUI.Services.Contracts
@inject IEmployeeService EmployeeService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<div style="margin-bottom:20px;">
    <span>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadPhoto" class="file-upload">
            <ActivatorContent>
                <MudLink Typo="Typo.body2" OnClick="PreventDefault">Upload</MudLink>
            </ActivatorContent>
        </MudFileUpload> | <MudLink Typo="Typo.body2" OnClick="RemovePhoto">Remove</MudLink>
    </span>
</div>

@code {
    [Parameter, EditorRequired]
    public int UserId { get; set; }

    [Parameter, EditorRequired]
    public bool UserHasPhoto { get; set; }

    [Parameter]
    public EventCallback OnPhotoUpdated { get; set; }

    private async Task UploadPhoto(IBrowserFile browserFile)
    {
        if (browserFile != null)
        {
            try
            {
                var format = "image/jpeg";
                var resizedPhoto = await browserFile.RequestImageFileAsync(format, 1000, 1000);

                if (UserHasPhoto)
                {
                    var dialog = DialogService.Show<ConfirmRemovePhotoDialog>();
                    var result = await dialog.Result;

                    if (!result.Canceled)
                    {
                        await EmployeeService.UploadEmployeePhoto(UserId, resizedPhoto);
                        Snackbar.Add("Photo uploaded successfully.", Severity.Success);
                        await OnPhotoUpdated.InvokeAsync();
                    }
                }
                else
                {
                    await EmployeeService.UploadEmployeePhoto(UserId, resizedPhoto);
                    Snackbar.Add("Photo uploaded successfully.", Severity.Success);
                    await OnPhotoUpdated.InvokeAsync();
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private async Task RemovePhoto()
    {
        try
        {
            if (UserHasPhoto)
            {
                var dialog = DialogService.Show<ConfirmReplacePhotoDialog>();
                var result = await dialog.Result;

                if (!result.Canceled)
                {
                    await EmployeeService.RemoveEmployeePhoto(UserId);
                    Snackbar.Add("Photo removed.", Severity.Success);
                    await OnPhotoUpdated.InvokeAsync();
                }
            }
            else
            {
                Snackbar.Add("User has no photo to remove", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void PreventDefault(MouseEventArgs e)
    {
    }
}

<style>
    .file-upload {
        display: inline-block;
    }
</style>
